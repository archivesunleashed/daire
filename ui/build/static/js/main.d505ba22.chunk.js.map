{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","state","fetching","packets","window","location","protocol","host","pathname","URL","slice","console","log","fetch","then","_","json","res","setState","sample","catch","e","this","sourcesBadge","className","icon","faSearch","map","packet","trigger","position","modal","sources","source","href","refURL","duplicates","key","imgPath","src","React","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iQA+EeA,E,2MAzDXC,MAAe,CACXC,UAAU,EACVC,QAAS,I,iFAGc,IAAD,EACKC,OAAOC,SAClC,OAFsB,EACdC,SACU,KAFI,EACJC,O,0CAID,IAAD,SACqBH,OAAOC,SAApCG,EADQ,EACRA,SAGFC,EAJU,EACEH,SAGK,KAJP,EACYC,KAGS,QAFxBC,EAASE,MAAM,GAI5BC,QAAQC,IAAIH,GAEZI,MAAMJ,GACDK,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GACFN,QAAQC,IAAIK,GACZ,EAAKC,SAAS,CAAEhB,UAAU,EAAOC,QAASc,EAAIE,YAEjDC,OAAM,SAAAC,GACHV,QAAQC,IAAIS,GACZ,EAAKH,SAAS,CAAEhB,UAAU,S,+BAMlC,IAA4B,IAAxBoB,KAAKrB,MAAMC,SACX,OAAO,KAGX,IAAMqB,EAAe,0BAAMC,UAAU,4BAA2B,kBAAC,IAAD,CAAiBC,KAAMC,OACvF,OACI,6BAEQJ,KAAKrB,MAAME,QAAQwB,KAAI,SAAAC,GAAM,OACzB,yBAAKJ,UAAU,iBACf,kBAAC,IAAD,CAAOK,QAASN,EAAcO,SAAS,cAAcC,OAAK,GACtD,6BAAK,gCAAMH,EAAOI,QAAQL,KAAI,SAAAM,GAAM,OAAI,4BAAKA,MAAxC,OAET,uBAAGC,KAAMN,EAAOO,QAChB,0BAAMX,UAAU,wBAAwBI,EAAOQ,WAAW,KAC1D,yBAAKC,IAAKT,EAAOU,QAASC,IAAKX,EAAOU,oB,GAhD5CE,IAAMC,WCTJC,QACW,cAA7BtC,OAAOC,SAASsC,UAEe,UAA7BvC,OAAOC,SAASsC,UAEhBvC,OAAOC,SAASsC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.d505ba22.chunk.js","sourcesContent":["import React from 'react';\nimport Popup from 'reactjs-popup';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\nimport { getPackedSettings } from 'http2';\n\ninterface Packet {\n    distance: string,\n    duplicates: number,\n    imgPath: string,\n    refURL: string,\n    sources: string[],\n}\n\ninterface Props { }\n\ninterface State {\n    fetching: boolean;\n    packets: Array<Packet>\n}\n\nclass App extends React.Component<Props, State> {\n    state: State = {\n        fetching: true,\n        packets: [],\n    }\n\n    getReferenceURL(): string {\n        const { protocol, host } = window.location\n        return protocol + '//' + host\n    }\n\n    componentDidMount() {\n        const { pathname, protocol, host } = window.location\n        const path = pathname.slice(1)\n\n        const URL = protocol + '//' + host + '/gen/' + path\n\n        console.log(URL)\n\n        fetch(URL)\n            .then(_ => _.json())\n            .then(res => {\n                console.log(res)\n                this.setState({ fetching: false, packets: res.sample })\n            })\n            .catch(e => {\n                console.log(e);\n                this.setState({ fetching: false })\n                // this.setState({ ...this.state, isFetching: false });\n            });\n    }\n\n    render() {\n        if (this.state.fetching === true) {\n            return null;\n        }\n\n        const sourcesBadge = <span className=\"notify-badge bottom blue\"><FontAwesomeIcon icon={faSearch} /></span>;\n        return (\n            <div >\n                {\n                    this.state.packets.map(packet => (\n                        <div className=\"search-result\">\n                        <Popup trigger={sourcesBadge} position=\"left center\" modal>\n                            <div><ul> {packet.sources.map(source => <li>{source}</li>)} </ul></div>\n                        </Popup>\n                        <a href={packet.refURL}>\n                        <span className=\"notify-badge top red\">{packet.duplicates+\"x\"}</span>\n                        <img key={packet.imgPath} src={packet.imgPath} />\n                        </a>\n                        </div>\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}